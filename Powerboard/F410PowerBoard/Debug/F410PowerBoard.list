
F410PowerBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004324  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800450c  0800450c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018d4  2000000c  08004520  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018e0  08004520  000218e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5a8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c99  00000000  00000000  0002a627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c7  00000000  00000000  0002ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015137  00000000  00000000  0002d4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c20a  00000000  00000000  000425ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008288d  00000000  00000000  0004e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002828  00000000  00000000  000d1088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d38b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080044d4 	.word	0x080044d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080044d4 	.word	0x080044d4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <UART_TransmitData>:
 * Splits a 16 bit int into 2 bytes and transmits using HAL function
 *Uses blocking polling method which may need to change. Interrupt method was losing
 *the second byte of data
 * */

void UART_TransmitData(uint16_t tx_buffer){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
	//char message[] = "hello world\r\n\0";
	uint8_t message[2];
	message[1] = (uint8_t) tx_buffer;
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	737b      	strb	r3, [r7, #13]
	message[0] = (uint8_t) (tx_buffer >> 8);
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	0a1b      	lsrs	r3, r3, #8
 8000518:	b29b      	uxth	r3, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart6, (uint8_t*)message, 2, 200);
 800051e:	f107 010c 	add.w	r1, r7, #12
 8000522:	23c8      	movs	r3, #200	; 0xc8
 8000524:	2202      	movs	r2, #2
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <UART_TransmitData+0x30>)
 8000528:	f002 ff7d 	bl	8003426 <HAL_UART_Transmit>
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000070 	.word	0x20000070

08000538 <write_tx_buffer>:
* Returns 0 if buffer full, 1 if write successful
Writes received 8bit binary into circular buffer
Updates global circle buffer at [head] and increments head

*/
int write_tx_buffer(uint16_t val, int* head, int tail, int mode) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	4603      	mov	r3, r0
 8000546:	81fb      	strh	r3, [r7, #14]

	if ((*head + 1) % TX_CIRCULAR_BUFFER_SIZE == tail) {
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	425a      	negs	r2, r3
 8000550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000554:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000558:	bf58      	it	pl
 800055a:	4253      	negpl	r3, r2
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	d101      	bne.n	8000566 <write_tx_buffer+0x2e>
		return 0;
 8000562:	2300      	movs	r3, #0
 8000564:	e029      	b.n	80005ba <write_tx_buffer+0x82>
	}


	if (mode == TXH_MODE){
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d10b      	bne.n	8000584 <write_tx_buffer+0x4c>
		circle_tx_bufferHigh[*head] = val;
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4915      	ldr	r1, [pc, #84]	; (80005c8 <write_tx_buffer+0x90>)
 8000572:	89fa      	ldrh	r2, [r7, #14]
 8000574:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		messages_in_txH++;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <write_tx_buffer+0x94>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a13      	ldr	r2, [pc, #76]	; (80005cc <write_tx_buffer+0x94>)
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	e00d      	b.n	80005a0 <write_tx_buffer+0x68>
	}else if (mode == TXL_MODE){
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d10a      	bne.n	80005a0 <write_tx_buffer+0x68>
		circle_tx_bufferLow[*head] = val;
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4910      	ldr	r1, [pc, #64]	; (80005d0 <write_tx_buffer+0x98>)
 8000590:	89fa      	ldrh	r2, [r7, #14]
 8000592:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		messages_in_txL++;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <write_tx_buffer+0x9c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <write_tx_buffer+0x9c>)
 800059e:	6013      	str	r3, [r2, #0]
	}else{
		//invalid buffer mode, make error handler
	}
	*head = (*head + 1) % TX_CIRCULAR_BUFFER_SIZE;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	425a      	negs	r2, r3
 80005a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80005b0:	bf58      	it	pl
 80005b2:	4253      	negpl	r3, r2
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	6013      	str	r3, [r2, #0]
	return 1;
 80005b8:	2301      	movs	r3, #1
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200008c4 	.word	0x200008c4
 80005cc:	200018d4 	.word	0x200018d4
 80005d0:	200010c4 	.word	0x200010c4
 80005d4:	200018d8 	.word	0x200018d8

080005d8 <write_rx_buffer>:

//Same method as write_tx_buffer but to different buffer
int write_rx_buffer(uint8_t val, int* head, int tail) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	73fb      	strb	r3, [r7, #15]

	if ((*head + 1) % RX_CIRCULAR_BUFFER_SIZE == tail) {
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	425a      	negs	r2, r3
 80005ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80005f6:	bf58      	it	pl
 80005f8:	4253      	negpl	r3, r2
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d101      	bne.n	8000604 <write_rx_buffer+0x2c>
		return 0;
 8000600:	2300      	movs	r3, #0
 8000602:	e016      	b.n	8000632 <write_rx_buffer+0x5a>
	}

	circle_rx_buffer[*head] = val;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	490d      	ldr	r1, [pc, #52]	; (8000640 <write_rx_buffer+0x68>)
 800060a:	7bfa      	ldrb	r2, [r7, #15]
 800060c:	54ca      	strb	r2, [r1, r3]
	messages_in_rx++;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <write_rx_buffer+0x6c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <write_rx_buffer+0x6c>)
 8000616:	6013      	str	r3, [r2, #0]

	*head = (*head + 1) % RX_CIRCULAR_BUFFER_SIZE;
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	425a      	negs	r2, r3
 8000620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000624:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000628:	bf58      	it	pl
 800062a:	4253      	negpl	r3, r2
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	6013      	str	r3, [r2, #0]
	return 1;
 8000630:	2301      	movs	r3, #1
}
 8000632:	4618      	mov	r0, r3
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200000b8 	.word	0x200000b8
 8000644:	200008c0 	.word	0x200008c0

08000648 <read_tx_buffer>:
/* Reads from circle buffer,then clears at tail
 * Param: pointer to 8 bit val
 * Returns: 0 if buffer empty, 1 if read successful
 * Increments tail
 */
int read_tx_buffer(uint16_t* val, int head, int* tail, int mode) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
	if (*tail == head) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	429a      	cmp	r2, r3
 800065e:	d101      	bne.n	8000664 <read_tx_buffer+0x1c>
		return 0;
 8000660:	2300      	movs	r3, #0
 8000662:	e021      	b.n	80006a8 <read_tx_buffer+0x60>
	}
	if (mode == TXH_MODE){
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d107      	bne.n	800067a <read_tx_buffer+0x32>
		*val = circle_tx_bufferHigh[*tail];
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <read_tx_buffer+0x6c>)
 8000670:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	801a      	strh	r2, [r3, #0]
 8000678:	e009      	b.n	800068e <read_tx_buffer+0x46>
	}else if (mode == TXL_MODE){
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d106      	bne.n	800068e <read_tx_buffer+0x46>
		*val = circle_tx_bufferLow[*tail];
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <read_tx_buffer+0x70>)
 8000686:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	801a      	strh	r2, [r3, #0]
	}else{
		//invalid buffer mode, make error handler
	}
	*tail = (*tail + 1) % TX_CIRCULAR_BUFFER_SIZE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	425a      	negs	r2, r3
 8000696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800069a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800069e:	bf58      	it	pl
 80006a0:	4253      	negpl	r3, r2
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
	return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	200008c4 	.word	0x200008c4
 80006b8:	200010c4 	.word	0x200010c4

080006bc <read_rx_buffer>:

//Same as read_tx_buffer
int read_rx_buffer(uint8_t* val, int head, int* tail) {
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	if (*tail == head) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d101      	bne.n	80006d6 <read_rx_buffer+0x1a>
		return 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e012      	b.n	80006fc <read_rx_buffer+0x40>
	}

	*val = circle_rx_buffer[*tail];
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <read_rx_buffer+0x4c>)
 80006dc:	5cd2      	ldrb	r2, [r2, r3]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	701a      	strb	r2, [r3, #0]

	*tail = (*tail + 1) % RX_CIRCULAR_BUFFER_SIZE;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	425a      	negs	r2, r3
 80006ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006ee:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80006f2:	bf58      	it	pl
 80006f4:	4253      	negpl	r3, r2
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
	return 1;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	200000b8 	.word	0x200000b8

0800070c <parse_rx>:
 * Param: uint8_t received byte
 * Returns: void
 * Takes rx byte and maps to instruction from powerboard_inst.h
 * Performs said instruction for GPIO Write, Analog and GPIO read
 * */
void parse_rx(uint8_t current_data){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	//gpio outputs
	if (current_data == E_PARALLEL_0)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b11      	cmp	r3, #17
 800071a:	d102      	bne.n	8000722 <parse_rx+0x16>
		e_parallel_off();
 800071c:	f000 fc74 	bl	8001008 <e_parallel_off>
		r_blue();
	else if (current_data == R_ALL_IO)
		r_all_io();
	else
		bad_rx_request();
}
 8000720:	e10f      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_PARALLEL_1)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b12      	cmp	r3, #18
 8000726:	d102      	bne.n	800072e <parse_rx+0x22>
		e_parallel_on();
 8000728:	f000 fc7a 	bl	8001020 <e_parallel_on>
}
 800072c:	e109      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == MICROPOWER_0)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b13      	cmp	r3, #19
 8000732:	d102      	bne.n	800073a <parse_rx+0x2e>
		micropower_off();
 8000734:	f000 fc80 	bl	8001038 <micropower_off>
}
 8000738:	e103      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == MICROPOWER_1)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b14      	cmp	r3, #20
 800073e:	d102      	bne.n	8000746 <parse_rx+0x3a>
		micropower_on();
 8000740:	f000 fc86 	bl	8001050 <micropower_on>
}
 8000744:	e0fd      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_VBATT_0)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b15      	cmp	r3, #21
 800074a:	d102      	bne.n	8000752 <parse_rx+0x46>
		e_vbatt_off();
 800074c:	f000 fc8c 	bl	8001068 <e_vbatt_off>
}
 8000750:	e0f7      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_VBATT_1)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b16      	cmp	r3, #22
 8000756:	d102      	bne.n	800075e <parse_rx+0x52>
		e_vbatt_on();
 8000758:	f000 fc94 	bl	8001084 <e_vbatt_on>
}
 800075c:	e0f1      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_5V_0)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b17      	cmp	r3, #23
 8000762:	d102      	bne.n	800076a <parse_rx+0x5e>
		e_5v_off();
 8000764:	f000 fc9c 	bl	80010a0 <e_5v_off>
}
 8000768:	e0eb      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_5V_1)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b18      	cmp	r3, #24
 800076e:	d102      	bne.n	8000776 <parse_rx+0x6a>
		e_5v_on();
 8000770:	f000 fca4 	bl	80010bc <e_5v_on>
}
 8000774:	e0e5      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_12V_0)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b19      	cmp	r3, #25
 800077a:	d102      	bne.n	8000782 <parse_rx+0x76>
		e_12v_off();
 800077c:	f000 fcac 	bl	80010d8 <e_12v_off>
}
 8000780:	e0df      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_12V_1)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b1a      	cmp	r3, #26
 8000786:	d102      	bne.n	800078e <parse_rx+0x82>
		e_12v_on();
 8000788:	f000 fcb4 	bl	80010f4 <e_12v_on>
}
 800078c:	e0d9      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_16V_0)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b1b      	cmp	r3, #27
 8000792:	d102      	bne.n	800079a <parse_rx+0x8e>
		e_16v_off();
 8000794:	f000 fcbc 	bl	8001110 <e_16v_off>
}
 8000798:	e0d3      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == E_16V_1)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b1c      	cmp	r3, #28
 800079e:	d102      	bne.n	80007a6 <parse_rx+0x9a>
		e_16v_on();
 80007a0:	f000 fcc4 	bl	800112c <e_16v_on>
}
 80007a4:	e0cd      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == RED_0)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b1d      	cmp	r3, #29
 80007aa:	d102      	bne.n	80007b2 <parse_rx+0xa6>
		led_red_on();
 80007ac:	f000 fcd8 	bl	8001160 <led_red_on>
}
 80007b0:	e0c7      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == RED_1)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b1e      	cmp	r3, #30
 80007b6:	d102      	bne.n	80007be <parse_rx+0xb2>
		led_red_off();
 80007b8:	f000 fcc6 	bl	8001148 <led_red_off>
}
 80007bc:	e0c1      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == GREEN_0)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b1f      	cmp	r3, #31
 80007c2:	d102      	bne.n	80007ca <parse_rx+0xbe>
		led_green_off();
 80007c4:	f000 fcd8 	bl	8001178 <led_green_off>
}
 80007c8:	e0bb      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == GREEN_1)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b20      	cmp	r3, #32
 80007ce:	d102      	bne.n	80007d6 <parse_rx+0xca>
		led_green_on();
 80007d0:	f000 fcde 	bl	8001190 <led_green_on>
}
 80007d4:	e0b5      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == BLUE_0)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b21      	cmp	r3, #33	; 0x21
 80007da:	d102      	bne.n	80007e2 <parse_rx+0xd6>
		led_blue_off();
 80007dc:	f000 fce4 	bl	80011a8 <led_blue_off>
}
 80007e0:	e0af      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == BLUE_1)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b22      	cmp	r3, #34	; 0x22
 80007e6:	d102      	bne.n	80007ee <parse_rx+0xe2>
		led_blue_on();
 80007e8:	f000 fcea 	bl	80011c0 <led_blue_on>
}
 80007ec:	e0a9      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT0_1)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b30      	cmp	r3, #48	; 0x30
 80007f2:	d102      	bne.n	80007fa <parse_rx+0xee>
		r_bat0_1();
 80007f4:	f000 fd0c 	bl	8001210 <r_bat0_1>
}
 80007f8:	e0a3      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT0_2)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b31      	cmp	r3, #49	; 0x31
 80007fe:	d102      	bne.n	8000806 <parse_rx+0xfa>
		r_bat0_2();
 8000800:	f000 fd1f 	bl	8001242 <r_bat0_2>
}
 8000804:	e09d      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT0_3)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b32      	cmp	r3, #50	; 0x32
 800080a:	d102      	bne.n	8000812 <parse_rx+0x106>
		r_bat0_3();
 800080c:	f000 fd32 	bl	8001274 <r_bat0_3>
}
 8000810:	e097      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT0_4)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b33      	cmp	r3, #51	; 0x33
 8000816:	d102      	bne.n	800081e <parse_rx+0x112>
		r_bat0_4();
 8000818:	f000 fd45 	bl	80012a6 <r_bat0_4>
}
 800081c:	e091      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT0_5)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b34      	cmp	r3, #52	; 0x34
 8000822:	d102      	bne.n	800082a <parse_rx+0x11e>
		r_bat0_5();
 8000824:	f000 fd58 	bl	80012d8 <r_bat0_5>
}
 8000828:	e08b      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT0_6)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b35      	cmp	r3, #53	; 0x35
 800082e:	d102      	bne.n	8000836 <parse_rx+0x12a>
		r_bat0_6();
 8000830:	f000 fd6b 	bl	800130a <r_bat0_6>
}
 8000834:	e085      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT1_1)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b36      	cmp	r3, #54	; 0x36
 800083a:	d102      	bne.n	8000842 <parse_rx+0x136>
		r_bat1_1();
 800083c:	f000 fd7e 	bl	800133c <r_bat1_1>
}
 8000840:	e07f      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT1_2)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b37      	cmp	r3, #55	; 0x37
 8000846:	d102      	bne.n	800084e <parse_rx+0x142>
		r_bat1_2();
 8000848:	f000 fd91 	bl	800136e <r_bat1_2>
}
 800084c:	e079      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT1_3)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b38      	cmp	r3, #56	; 0x38
 8000852:	d102      	bne.n	800085a <parse_rx+0x14e>
		r_bat1_3();
 8000854:	f000 fda4 	bl	80013a0 <r_bat1_3>
}
 8000858:	e073      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT1_4)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b39      	cmp	r3, #57	; 0x39
 800085e:	d102      	bne.n	8000866 <parse_rx+0x15a>
		r_bat1_4();
 8000860:	f000 fdb7 	bl	80013d2 <r_bat1_4>
}
 8000864:	e06d      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT1_5)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b3a      	cmp	r3, #58	; 0x3a
 800086a:	d102      	bne.n	8000872 <parse_rx+0x166>
		r_bat1_5();
 800086c:	f000 fdca 	bl	8001404 <r_bat1_5>
}
 8000870:	e067      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BAT1_6)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b3b      	cmp	r3, #59	; 0x3b
 8000876:	d102      	bne.n	800087e <parse_rx+0x172>
		r_bat1_6();
 8000878:	f000 fddd 	bl	8001436 <r_bat1_6>
}
 800087c:	e061      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_EXT_PRES)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b3c      	cmp	r3, #60	; 0x3c
 8000882:	d102      	bne.n	800088a <parse_rx+0x17e>
		r_ext_pres();
 8000884:	f000 fdf0 	bl	8001468 <r_ext_pres>
}
 8000888:	e05b      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_WATER_SENSE)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b3d      	cmp	r3, #61	; 0x3d
 800088e:	d102      	bne.n	8000896 <parse_rx+0x18a>
		r_water_sense();
 8000890:	f000 fe03 	bl	800149a <r_water_sense>
}
 8000894:	e055      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_REED_DET)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b40      	cmp	r3, #64	; 0x40
 800089a:	d102      	bne.n	80008a2 <parse_rx+0x196>
		r_reed_det();
 800089c:	f000 fe16 	bl	80014cc <r_reed_det>
}
 80008a0:	e04f      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_AUXREED1)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b41      	cmp	r3, #65	; 0x41
 80008a6:	d102      	bne.n	80008ae <parse_rx+0x1a2>
		r_auxreed1();
 80008a8:	f000 fe28 	bl	80014fc <r_auxreed1>
}
 80008ac:	e049      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_AUXREED2)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b42      	cmp	r3, #66	; 0x42
 80008b2:	d102      	bne.n	80008ba <parse_rx+0x1ae>
		r_auxreed2();
 80008b4:	f000 fe38 	bl	8001528 <r_auxreed2>
}
 80008b8:	e043      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_AUXREED3)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b43      	cmp	r3, #67	; 0x43
 80008be:	d102      	bne.n	80008c6 <parse_rx+0x1ba>
		r_auxreed3();
 80008c0:	f000 fe48 	bl	8001554 <r_auxreed3>
}
 80008c4:	e03d      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_PARALLEL_E)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b44      	cmp	r3, #68	; 0x44
 80008ca:	d102      	bne.n	80008d2 <parse_rx+0x1c6>
		r_parallel_e();
 80008cc:	f000 fe58 	bl	8001580 <r_parallel_e>
}
 80008d0:	e037      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_MICROPOWER)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b45      	cmp	r3, #69	; 0x45
 80008d6:	d102      	bne.n	80008de <parse_rx+0x1d2>
		r_micropower();
 80008d8:	f000 fe68 	bl	80015ac <r_micropower>
}
 80008dc:	e031      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_VBATT_E)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b46      	cmp	r3, #70	; 0x46
 80008e2:	d102      	bne.n	80008ea <parse_rx+0x1de>
		r_vbatt_e();
 80008e4:	f000 fe7a 	bl	80015dc <r_vbatt_e>
}
 80008e8:	e02b      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_5V_E)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b47      	cmp	r3, #71	; 0x47
 80008ee:	d102      	bne.n	80008f6 <parse_rx+0x1ea>
		r_5v_e();
 80008f0:	f000 fe8c 	bl	800160c <r_5v_e>
}
 80008f4:	e025      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_12V_E)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b48      	cmp	r3, #72	; 0x48
 80008fa:	d102      	bne.n	8000902 <parse_rx+0x1f6>
		r_12v_e();
 80008fc:	f000 fe9e 	bl	800163c <r_12v_e>
}
 8000900:	e01f      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_16V_E)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b49      	cmp	r3, #73	; 0x49
 8000906:	d102      	bne.n	800090e <parse_rx+0x202>
		r_16v_e();
 8000908:	f000 feb0 	bl	800166c <r_16v_e>
}
 800090c:	e019      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_RED)
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b4a      	cmp	r3, #74	; 0x4a
 8000912:	d102      	bne.n	800091a <parse_rx+0x20e>
		r_red();
 8000914:	f000 fec2 	bl	800169c <r_red>
}
 8000918:	e013      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_GREEN)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b4b      	cmp	r3, #75	; 0x4b
 800091e:	d102      	bne.n	8000926 <parse_rx+0x21a>
		r_green();
 8000920:	f000 fed4 	bl	80016cc <r_green>
}
 8000924:	e00d      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_BLUE)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b4c      	cmp	r3, #76	; 0x4c
 800092a:	d102      	bne.n	8000932 <parse_rx+0x226>
		r_blue();
 800092c:	f000 fee4 	bl	80016f8 <r_blue>
}
 8000930:	e007      	b.n	8000942 <parse_rx+0x236>
	else if (current_data == R_ALL_IO)
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b4d      	cmp	r3, #77	; 0x4d
 8000936:	d102      	bne.n	800093e <parse_rx+0x232>
		r_all_io();
 8000938:	f000 fef4 	bl	8001724 <r_all_io>
}
 800093c:	e001      	b.n	8000942 <parse_rx+0x236>
		bad_rx_request();
 800093e:	f000 ff89 	bl	8001854 <bad_rx_request>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_UART_RxCpltCallback>:
 * When receipt via UART is detected
 * Writes rx_byte_buffer into circular buffer
 * Restarts UART receive interrupt enable
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0c      	ldr	r2, [pc, #48]	; (800098c <HAL_UART_RxCpltCallback+0x40>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10c      	bne.n	8000978 <HAL_UART_RxCpltCallback+0x2c>
	    {
	    	if (write_rx_buffer(rx_byte_buffer, &head_rx, tail_rx)) {
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_UART_RxCpltCallback+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <HAL_UART_RxCpltCallback+0x48>)
 8000964:	6812      	ldr	r2, [r2, #0]
 8000966:	490c      	ldr	r1, [pc, #48]	; (8000998 <HAL_UART_RxCpltCallback+0x4c>)
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe35 	bl	80005d8 <write_rx_buffer>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <HAL_UART_RxCpltCallback+0x2c>
	    		//UART_Print(&rx_byte_buffer);
	    	} else {
	    		rx_buffer_full();
 8000974:	f000 ff66 	bl	8001844 <rx_buffer_full>
	    	}
	    }
	HAL_UART_Receive_IT(&huart6, &rx_byte_buffer, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	4905      	ldr	r1, [pc, #20]	; (8000990 <HAL_UART_RxCpltCallback+0x44>)
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <HAL_UART_RxCpltCallback+0x50>)
 800097e:	f002 fde4 	bl	800354a <HAL_UART_Receive_IT>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40011400 	.word	0x40011400
 8000990:	200000b4 	.word	0x200000b4
 8000994:	200008bc 	.word	0x200008bc
 8000998:	200008b8 	.word	0x200008b8
 800099c:	20000070 	.word	0x20000070

080009a0 <write_txL_buffer>:

//Shortcuts for write tx_buffer------------------------------------------------
void write_txL_buffer(uint16_t val){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	if(write_tx_buffer(val, &head_txL, tail_txL, TXL_MODE)){}
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <write_txL_buffer+0x2c>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	88f8      	ldrh	r0, [r7, #6]
 80009b0:	2302      	movs	r3, #2
 80009b2:	4907      	ldr	r1, [pc, #28]	; (80009d0 <write_txL_buffer+0x30>)
 80009b4:	f7ff fdc0 	bl	8000538 <write_tx_buffer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <write_txL_buffer+0x22>
	else{
		txL_buffer_full();
 80009be:	f000 ff39 	bl	8001834 <txL_buffer_full>
	}
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200018d0 	.word	0x200018d0
 80009d0:	200018cc 	.word	0x200018cc

080009d4 <write_txH_buffer>:
void write_txH_buffer(uint16_t val){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	write_tx_buffer(val, &head_txH, tail_txH, TXH_MODE);
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <write_txH_buffer+0x20>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	88f8      	ldrh	r0, [r7, #6]
 80009e4:	2301      	movs	r3, #1
 80009e6:	4904      	ldr	r1, [pc, #16]	; (80009f8 <write_txH_buffer+0x24>)
 80009e8:	f7ff fda6 	bl	8000538 <write_tx_buffer>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200018c8 	.word	0x200018c8
 80009f8:	200018c4 	.word	0x200018c4

080009fc <HAL_GPIO_EXTI_Callback>:


//Gpio interrupts. Takes pin number writes corresponding message. /triggers on rise and fall for each alert
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == P_BATT0_CA){
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a0c:	d108      	bne.n	8000a20 <HAL_GPIO_EXTI_Callback+0x24>
		write_tx_buffer(CA_BAT0, &head_txH, tail_txH, TXH_MODE);
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	2301      	movs	r3, #1
 8000a14:	492b      	ldr	r1, [pc, #172]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a16:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8000a1a:	f7ff fd8d 	bl	8000538 <write_tx_buffer>
	}else if (GPIO_Pin == P_16V_CA){
		write_tx_buffer(CA_16V, &head_txH, tail_txH, TXH_MODE);
	}else{
		__NOP();
	}
}
 8000a1e:	e04b      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0xbc>
	}else if (GPIO_Pin == P_BATT1_CA){
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a26:	d108      	bne.n	8000a3a <HAL_GPIO_EXTI_Callback+0x3e>
		write_tx_buffer(CA_BAT1, &head_txH, tail_txH, TXH_MODE);
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4925      	ldr	r1, [pc, #148]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a30:	f64f 70f1 	movw	r0, #65521	; 0xfff1
 8000a34:	f7ff fd80 	bl	8000538 <write_tx_buffer>
}
 8000a38:	e03e      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0xbc>
	}else if (GPIO_Pin == P_PARALLEL_CA){
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a40:	d108      	bne.n	8000a54 <HAL_GPIO_EXTI_Callback+0x58>
		write_tx_buffer(CA_PARALLEL, &head_txH, tail_txH, TXH_MODE);
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	491e      	ldr	r1, [pc, #120]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a4a:	f64f 70f2 	movw	r0, #65522	; 0xfff2
 8000a4e:	f7ff fd73 	bl	8000538 <write_tx_buffer>
}
 8000a52:	e031      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0xbc>
	}else if (GPIO_Pin == P_VBATT_CA){
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d108      	bne.n	8000a6c <HAL_GPIO_EXTI_Callback+0x70>
		write_tx_buffer(CA_VBATT, &head_txH, tail_txH, TXH_MODE);
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	4918      	ldr	r1, [pc, #96]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a62:	f64f 70f3 	movw	r0, #65523	; 0xfff3
 8000a66:	f7ff fd67 	bl	8000538 <write_tx_buffer>
}
 8000a6a:	e025      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0xbc>
	}else if (GPIO_Pin == P_5V_CA){
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	2b40      	cmp	r3, #64	; 0x40
 8000a70:	d108      	bne.n	8000a84 <HAL_GPIO_EXTI_Callback+0x88>
		write_tx_buffer(CA_5V, &head_txH, tail_txH, TXH_MODE);
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	4912      	ldr	r1, [pc, #72]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a7a:	f64f 70f4 	movw	r0, #65524	; 0xfff4
 8000a7e:	f7ff fd5b 	bl	8000538 <write_tx_buffer>
}
 8000a82:	e019      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0xbc>
	}else if (GPIO_Pin == P_12V_CA){
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2b80      	cmp	r3, #128	; 0x80
 8000a88:	d108      	bne.n	8000a9c <HAL_GPIO_EXTI_Callback+0xa0>
		write_tx_buffer(CA_12V, &head_txH, tail_txH, TXH_MODE);
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a92:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8000a96:	f7ff fd4f 	bl	8000538 <write_tx_buffer>
}
 8000a9a:	e00d      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0xbc>
	}else if (GPIO_Pin == P_16V_CA){
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa2:	d108      	bne.n	8000ab6 <HAL_GPIO_EXTI_Callback+0xba>
		write_tx_buffer(CA_16V, &head_txH, tail_txH, TXH_MODE);
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	4906      	ldr	r1, [pc, #24]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000aac:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000ab0:	f7ff fd42 	bl	8000538 <write_tx_buffer>
}
 8000ab4:	e000      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0xbc>
		__NOP();
 8000ab6:	bf00      	nop
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200018c8 	.word	0x200018c8
 8000ac4:	200018c4 	.word	0x200018c4

08000ac8 <adc_sel>:
/*Param: uint16_t ADC CHannel - 0 is 0, 1 is 0x1, 2 is 0x2, 3 is 0x4 etc
 * Returns void
 * Selects which ADC channel to poll for results
 *
 * */
void adc_sel(uint16_t ADC_CHANNEL){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL;
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <adc_sel+0x44>)
 8000af4:	f001 fa26 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <adc_sel+0x3a>
	{
	  Error_Handler();
 8000afe:	f000 fa6b 	bl	8000fd8 <Error_Handler>
	}
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000028 	.word	0x20000028

08000b10 <adc_reset_conf>:

//Resets ADC rank to 0 to avoid conflicting measurements- this may be causing problems
void adc_reset_conf(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

		sConfig.Channel = ADC_CHANNEL_0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
		sConfig.Rank = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <adc_reset_conf+0x3c>)
 8000b34:	f001 fa06 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <adc_reset_conf+0x32>
		{
		  Error_Handler();
 8000b3e:	f000 fa4b 	bl	8000fd8 <Error_Handler>
		}
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000028 	.word	0x20000028

08000b50 <adc_read>:
//Returns a 32 bit right justified adc value
uint32_t adc_read(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <adc_read+0x20>)
 8000b56:	f001 f8a9 	bl	8001cac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <adc_read+0x20>)
 8000b5e:	f001 f959 	bl	8001e14 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <adc_read+0x20>)
 8000b64:	f001 f9e1 	bl	8001f2a <HAL_ADC_GetValue>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000028 	.word	0x20000028

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7a:	f000 ffe1 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7e:	f000 f865 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f000 f955 	bl	8000e30 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000b86:	f000 f921 	bl	8000dcc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000b8a:	f000 f8cb 	bl	8000d24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  adc_reset_conf();
 8000b8e:	f7ff ffbf 	bl	8000b10 <adc_reset_conf>
  uint8_t current_rx_data;// current rx and tx integers
  uint16_t current_txL_data;
  uint16_t current_txH_data;
  set_enables_init();
 8000b92:	f000 fb21 	bl	80011d8 <set_enables_init>
  set_cont_lights();
 8000b96:	f000 fb31 	bl	80011fc <set_cont_lights>
  HAL_UART_Receive_IT(&huart6, &rx_byte_buffer, 1); // begin UART interrupt receive
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4920      	ldr	r1, [pc, #128]	; (8000c20 <main+0xac>)
 8000b9e:	4821      	ldr	r0, [pc, #132]	; (8000c24 <main+0xb0>)
 8000ba0:	f002 fcd3 	bl	800354a <HAL_UART_Receive_IT>
	  	  /*
	  	   * All received bytes are read and removed from circular buffer into current data buffer
	  	   * terminated by \n\0 in current data
	  	   */
	  	  // High priority transmissions are completed first such as alerts, errors
	  	  while (messages_in_txH){
 8000ba4:	e00f      	b.n	8000bc6 <main+0x52>
	  		  read_tx_buffer(&current_txH_data, head_txH, &tail_txH, TXH_MODE);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <main+0xb4>)
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	1cb8      	adds	r0, r7, #2
 8000bac:	2301      	movs	r3, #1
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <main+0xb8>)
 8000bb0:	f7ff fd4a 	bl	8000648 <read_tx_buffer>
	  		  messages_in_txH--;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <main+0xbc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <main+0xbc>)
 8000bbc:	6013      	str	r3, [r2, #0]
	  		  UART_TransmitData(current_txH_data);
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fc9f 	bl	8000504 <UART_TransmitData>
	  	  while (messages_in_txH){
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <main+0xbc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1eb      	bne.n	8000ba6 <main+0x32>
	  	  }
	  	  /*If messages to receive or transmit, read and analyze or transmit*/
	  	  if (messages_in_rx) {
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <main+0xc0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00f      	beq.n	8000bf6 <main+0x82>
	  		  read_rx_buffer(&current_rx_data, head_rx, &tail_rx);
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <main+0xc4>)
 8000bd8:	6819      	ldr	r1, [r3, #0]
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <main+0xc8>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fd6c 	bl	80006bc <read_rx_buffer>
	  		  messages_in_rx--;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <main+0xc0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <main+0xc0>)
 8000bec:	6013      	str	r3, [r2, #0]
	  		  parse_rx(current_rx_data);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd8b 	bl	800070c <parse_rx>
	  		  //UART_Print(&current_rx_data);
	  		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	  	  }
	  	  if(messages_in_txL){
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <main+0xcc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0e3      	beq.n	8000bc6 <main+0x52>
	  		  read_tx_buffer(&current_txL_data, head_txL, &tail_txL, TXL_MODE);
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <main+0xd0>)
 8000c00:	6819      	ldr	r1, [r3, #0]
 8000c02:	1d38      	adds	r0, r7, #4
 8000c04:	2302      	movs	r3, #2
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <main+0xd4>)
 8000c08:	f7ff fd1e 	bl	8000648 <read_tx_buffer>
	  		  messages_in_txL--;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <main+0xcc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <main+0xcc>)
 8000c14:	6013      	str	r3, [r2, #0]
	  		  UART_TransmitData(current_txL_data);
 8000c16:	88bb      	ldrh	r3, [r7, #4]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc73 	bl	8000504 <UART_TransmitData>
	  	  while (messages_in_txH){
 8000c1e:	e7d2      	b.n	8000bc6 <main+0x52>
 8000c20:	200000b4 	.word	0x200000b4
 8000c24:	20000070 	.word	0x20000070
 8000c28:	200018c4 	.word	0x200018c4
 8000c2c:	200018c8 	.word	0x200018c8
 8000c30:	200018d4 	.word	0x200018d4
 8000c34:	200008c0 	.word	0x200008c0
 8000c38:	200008b8 	.word	0x200008b8
 8000c3c:	200008bc 	.word	0x200008bc
 8000c40:	200018d8 	.word	0x200018d8
 8000c44:	200018cc 	.word	0x200018cc
 8000c48:	200018d0 	.word	0x200018d0

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	; 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2234      	movs	r2, #52	; 0x34
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fc0e 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <SystemClock_Config+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <SystemClock_Config+0xd4>)
 8000c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <SystemClock_Config+0xd4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 f8d4 	bl	8002e84 <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ce2:	f000 f979 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2302      	movs	r3, #2
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	2102      	movs	r1, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fe9e 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d0e:	f000 f963 	bl	8000fd8 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3750      	adds	r7, #80	; 0x50
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <MX_ADC1_Init+0xa0>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <MX_ADC1_Init+0xa4>)
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000d88:	f000 ff4c 	bl	8001c24 <HAL_ADC_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d92:	f000 f921 	bl	8000fd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_ADC1_Init+0x9c>)
 8000da8:	f001 f8cc 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000db2:	f000 f911 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000028 	.word	0x20000028
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	0f000001 	.word	0x0f000001

08000dcc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <MX_USART6_UART_Init+0x60>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <MX_USART6_UART_Init+0x5c>)
 8000e04:	f002 fac2 	bl	800338c <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f000 f8e3 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0); //Enable UART Interrupts
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2047      	movs	r0, #71	; 0x47
 8000e18:	f001 fb8d 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e1c:	2047      	movs	r0, #71	; 0x47
 8000e1e:	f001 fba6 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART6_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000070 	.word	0x20000070
 8000e2c:	40011400 	.word	0x40011400

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a57      	ldr	r2, [pc, #348]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a49      	ldr	r2, [pc, #292]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <MX_GPIO_Init+0x198>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000ebc:	4843      	ldr	r0, [pc, #268]	; (8000fcc <MX_GPIO_Init+0x19c>)
 8000ebe:	f001 fd8f 	bl	80029e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_11
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f644 0185 	movw	r1, #18565	; 0x4885
 8000ec8:	4841      	ldr	r0, [pc, #260]	; (8000fd0 <MX_GPIO_Init+0x1a0>)
 8000eca:	f001 fd89 	bl	80029e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8000ece:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8000ed2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4839      	ldr	r0, [pc, #228]	; (8000fcc <MX_GPIO_Init+0x19c>)
 8000ee8:	f001 fbee 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB14 PB11
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_11
 8000eec:	f644 0385 	movw	r3, #18565	; 0x4885
 8000ef0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4832      	ldr	r0, [pc, #200]	; (8000fd0 <MX_GPIO_Init+0x1a0>)
 8000f06:	f001 fbdf 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f0e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	482c      	ldr	r0, [pc, #176]	; (8000fd0 <MX_GPIO_Init+0x1a0>)
 8000f20:	f001 fbd2 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000f24:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f2a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4824      	ldr	r0, [pc, #144]	; (8000fcc <MX_GPIO_Init+0x19c>)
 8000f3c:	f001 fbc4 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f40:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f46:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0x1a4>)
 8000f58:	f001 fbb6 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <MX_GPIO_Init+0x19c>)
 8000f72:	f001 fba9 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f76:	2370      	movs	r3, #112	; 0x70
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <MX_GPIO_Init+0x1a0>)
 8000f8a:	f001 fb9d 	bl	80026c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2007      	movs	r0, #7
 8000f94:	f001 facf 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f98:	2007      	movs	r0, #7
 8000f9a:	f001 fae8 	bl	800256e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2017      	movs	r0, #23
 8000fa4:	f001 fac7 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fa8:	2017      	movs	r0, #23
 8000faa:	f001 fae0 	bl	800256e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2028      	movs	r0, #40	; 0x28
 8000fb4:	f001 fabf 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fb8:	2028      	movs	r0, #40	; 0x28
 8000fba:	f001 fad8 	bl	800256e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <pulse_enables_clock>:
#include "pin_lib.h"
#include <string.h>
#include "main.h"

//GPIO output on/off--------------------------------------------------------
void pulse_enables_clock(){//SET AND RESET PB11 CLOCK FOR BATT, 5V, 12V, 16V ENABLES
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ENABLES_CLK, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <pulse_enables_clock+0x20>)
 8000ff0:	f001 fcf6 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ENABLES_CLK, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	4802      	ldr	r0, [pc, #8]	; (8001004 <pulse_enables_clock+0x20>)
 8000ffc:	f001 fcf0 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40020400 	.word	0x40020400

08001008 <e_parallel_off>:

void e_parallel_off(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_PARALLEL_E, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2104      	movs	r1, #4
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <e_parallel_off+0x14>)
 8001012:	f001 fce5 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020400 	.word	0x40020400

08001020 <e_parallel_on>:
void e_parallel_on(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_PARALLEL_E, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2104      	movs	r1, #4
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <e_parallel_on+0x14>)
 800102a:	f001 fcd9 	bl	80029e0 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020400 	.word	0x40020400

08001038 <micropower_off>:
void micropower_off(){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_MICROPOWER, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	4802      	ldr	r0, [pc, #8]	; (800104c <micropower_off+0x14>)
 8001044:	f001 fccc 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40020800 	.word	0x40020800

08001050 <micropower_on>:
void micropower_on(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_MICROPOWER, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <micropower_on+0x14>)
 800105c:	f001 fcc0 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020800 	.word	0x40020800

08001068 <e_vbatt_off>:
void e_vbatt_off(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_VBATT_E, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <e_vbatt_off+0x18>)
 8001074:	f001 fcb4 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 8001078:	f7ff ffb4 	bl	8000fe4 <pulse_enables_clock>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020800 	.word	0x40020800

08001084 <e_vbatt_on>:
void e_vbatt_on(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_VBATT_E, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <e_vbatt_on+0x18>)
 8001090:	f001 fca6 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 8001094:	f7ff ffa6 	bl	8000fe4 <pulse_enables_clock>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020800 	.word	0x40020800

080010a0 <e_5v_off>:
void e_5v_off(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_5V_E, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <e_5v_off+0x18>)
 80010ac:	f001 fc98 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 80010b0:	f7ff ff98 	bl	8000fe4 <pulse_enables_clock>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020800 	.word	0x40020800

080010bc <e_5v_on>:
void e_5v_on(){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_5V_E, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <e_5v_on+0x18>)
 80010c8:	f001 fc8a 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 80010cc:	f7ff ff8a 	bl	8000fe4 <pulse_enables_clock>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40020800 	.word	0x40020800

080010d8 <e_12v_off>:
void e_12v_off(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_12V_E, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <e_12v_off+0x18>)
 80010e4:	f001 fc7c 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 80010e8:	f7ff ff7c 	bl	8000fe4 <pulse_enables_clock>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020800 	.word	0x40020800

080010f4 <e_12v_on>:
void e_12v_on(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_12V_E, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <e_12v_on+0x18>)
 8001100:	f001 fc6e 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 8001104:	f7ff ff6e 	bl	8000fe4 <pulse_enables_clock>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020800 	.word	0x40020800

08001110 <e_16v_off>:
void e_16v_off(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_16V_E, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <e_16v_off+0x18>)
 800111c:	f001 fc60 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 8001120:	f7ff ff60 	bl	8000fe4 <pulse_enables_clock>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020800 	.word	0x40020800

0800112c <e_16v_on>:
void e_16v_on(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, P_16V_E, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <e_16v_on+0x18>)
 8001138:	f001 fc52 	bl	80029e0 <HAL_GPIO_WritePin>
	pulse_enables_clock();
 800113c:	f7ff ff52 	bl	8000fe4 <pulse_enables_clock>
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020800 	.word	0x40020800

08001148 <led_red_off>:
void led_red_off(){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_RED_LED, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001152:	4802      	ldr	r0, [pc, #8]	; (800115c <led_red_off+0x14>)
 8001154:	f001 fc44 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020400 	.word	0x40020400

08001160 <led_red_on>:
void led_red_on(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_RED_LED, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	4802      	ldr	r0, [pc, #8]	; (8001174 <led_red_on+0x14>)
 800116c:	f001 fc38 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40020400 	.word	0x40020400

08001178 <led_green_off>:

void led_green_off(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_GREEN_LED, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2101      	movs	r1, #1
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <led_green_off+0x14>)
 8001182:	f001 fc2d 	bl	80029e0 <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020400 	.word	0x40020400

08001190 <led_green_on>:
void led_green_on(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_GREEN_LED, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2101      	movs	r1, #1
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <led_green_on+0x14>)
 800119a:	f001 fc21 	bl	80029e0 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020400 	.word	0x40020400

080011a8 <led_blue_off>:
void led_blue_off(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_BLUE_LED, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <led_blue_off+0x14>)
 80011b2:	f001 fc15 	bl	80029e0 <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020400 	.word	0x40020400

080011c0 <led_blue_on>:
void led_blue_on(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, P_BLUE_LED, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <led_blue_on+0x14>)
 80011ca:	f001 fc09 	bl	80029e0 <HAL_GPIO_WritePin>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020400 	.word	0x40020400

080011d8 <set_enables_init>:

void set_enables_init(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	e_parallel_on();
 80011dc:	f7ff ff20 	bl	8001020 <e_parallel_on>
	micropower_on(); //set parallel enable and micropower on outputs
 80011e0:	f7ff ff36 	bl	8001050 <micropower_on>

	e_vbatt_on();
 80011e4:	f7ff ff4e 	bl	8001084 <e_vbatt_on>
	e_5v_on();
 80011e8:	f7ff ff68 	bl	80010bc <e_5v_on>
	e_12v_on();
 80011ec:	f7ff ff82 	bl	80010f4 <e_12v_on>
	e_16v_on();
 80011f0:	f7ff ff9c 	bl	800112c <e_16v_on>
	pulse_enables_clock(); //update 4 enables and send clock pulse to update
 80011f4:	f7ff fef6 	bl	8000fe4 <pulse_enables_clock>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <set_cont_lights>:

void set_cont_lights(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	led_green_on();
 8001200:	f7ff ffc6 	bl	8001190 <led_green_on>
	led_red_on();
 8001204:	f7ff ffac 	bl	8001160 <led_red_on>
	led_blue_on();
 8001208:	f7ff ffda 	bl	80011c0 <led_blue_on>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <r_bat0_1>:

//ADC inputs request and transmission--------------------------------------------------------------------
void r_bat0_1(){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_15);
 8001216:	200f      	movs	r0, #15
 8001218:	f7ff fc56 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 800121c:	f7ff fc98 	bl	8000b50 <adc_read>
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 8001224:	f7ff fc74 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer(T_BAT0_1|(uint16_t)adc_data);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	b21b      	sxth	r3, r3
 800122c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001230:	b21b      	sxth	r3, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fbb3 	bl	80009a0 <write_txL_buffer>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <r_bat0_2>:
void r_bat0_2(){
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_14);
 8001248:	200e      	movs	r0, #14
 800124a:	f7ff fc3d 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 800124e:	f7ff fc7f 	bl	8000b50 <adc_read>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 8001256:	f7ff fc5b 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer(T_BAT0_2|(uint16_t)adc_data);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	b21b      	sxth	r3, r3
 800125e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001262:	b21b      	sxth	r3, r3
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fb9a 	bl	80009a0 <write_txL_buffer>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <r_bat0_3>:
void r_bat0_3(){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_7);
 800127a:	2007      	movs	r0, #7
 800127c:	f7ff fc24 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 8001280:	f7ff fc66 	bl	8000b50 <adc_read>
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 8001288:	f7ff fc42 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT0_3|(uint16_t)adc_data));
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	b21b      	sxth	r3, r3
 8001290:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8001294:	b21b      	sxth	r3, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fb81 	bl	80009a0 <write_txL_buffer>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <r_bat0_4>:
void r_bat0_4(){
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_6);
 80012ac:	2006      	movs	r0, #6
 80012ae:	f7ff fc0b 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 80012b2:	f7ff fc4d 	bl	8000b50 <adc_read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 80012ba:	f7ff fc29 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT0_4|(uint16_t)adc_data));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	f443 5398 	orr.w	r3, r3, #4864	; 0x1300
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fb68 	bl	80009a0 <write_txL_buffer>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <r_bat0_5>:
void r_bat0_5(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_5);
 80012de:	2005      	movs	r0, #5
 80012e0:	f7ff fbf2 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 80012e4:	f7ff fc34 	bl	8000b50 <adc_read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 80012ec:	f7ff fc10 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT0_5|(uint16_t)adc_data));
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fb4f 	bl	80009a0 <write_txL_buffer>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <r_bat0_6>:
void r_bat0_6(){
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_4);
 8001310:	2004      	movs	r0, #4
 8001312:	f7ff fbd9 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 8001316:	f7ff fc1b 	bl	8000b50 <adc_read>
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 800131e:	f7ff fbf7 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT0_6|(uint16_t)adc_data));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	b21b      	sxth	r3, r3
 8001326:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 800132a:	b21b      	sxth	r3, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fb36 	bl	80009a0 <write_txL_buffer>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <r_bat1_1>:
void r_bat1_1(){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_3);
 8001342:	2003      	movs	r0, #3
 8001344:	f7ff fbc0 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 8001348:	f7ff fc02 	bl	8000b50 <adc_read>
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 8001350:	f7ff fbde 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT1_1|(uint16_t)adc_data));
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	b21b      	sxth	r3, r3
 8001358:	f443 53b8 	orr.w	r3, r3, #5888	; 0x1700
 800135c:	b21b      	sxth	r3, r3
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fb1d 	bl	80009a0 <write_txL_buffer>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <r_bat1_2>:
void r_bat1_2(){
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_2);
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fba7 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 800137a:	f7ff fbe9 	bl	8000b50 <adc_read>
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 8001382:	f7ff fbc5 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT1_2|(uint16_t)adc_data));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	b21b      	sxth	r3, r3
 800138a:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800138e:	b21b      	sxth	r3, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb04 	bl	80009a0 <write_txL_buffer>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <r_bat1_3>:
void r_bat1_3(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff fb8e 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 80013ac:	f7ff fbd0 	bl	8000b50 <adc_read>
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 80013b4:	f7ff fbac 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT1_3|(uint16_t)adc_data));
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff faeb 	bl	80009a0 <write_txL_buffer>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <r_bat1_4>:
void r_bat1_4(){
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_0);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fb75 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 80013de:	f7ff fbb7 	bl	8000b50 <adc_read>
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 80013e6:	f7ff fb93 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT1_4|(uint16_t)adc_data));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	f443 53d0 	orr.w	r3, r3, #6656	; 0x1a00
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fad2 	bl	80009a0 <write_txL_buffer>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <r_bat1_5>:
void r_bat1_5(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_13);
 800140a:	200d      	movs	r0, #13
 800140c:	f7ff fb5c 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 8001410:	f7ff fb9e 	bl	8000b50 <adc_read>
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 8001418:	f7ff fb7a 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT1_5|(uint16_t)adc_data));
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	b21b      	sxth	r3, r3
 8001420:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 8001424:	b21b      	sxth	r3, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fab9 	bl	80009a0 <write_txL_buffer>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <r_bat1_6>:
void r_bat1_6(){
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_12);
 800143c:	200c      	movs	r0, #12
 800143e:	f7ff fb43 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 8001442:	f7ff fb85 	bl	8000b50 <adc_read>
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 800144a:	f7ff fb61 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_BAT1_6|(uint16_t)adc_data));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	b21b      	sxth	r3, r3
 8001452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001456:	b21b      	sxth	r3, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff faa0 	bl	80009a0 <write_txL_buffer>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <r_ext_pres>:
void r_ext_pres(){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_10);
 800146e:	200a      	movs	r0, #10
 8001470:	f7ff fb2a 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 8001474:	f7ff fb6c 	bl	8000b50 <adc_read>
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 800147c:	f7ff fb48 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_EXT_PRES|(uint16_t)adc_data));
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	b21b      	sxth	r3, r3
 8001484:	f443 53e8 	orr.w	r3, r3, #7424	; 0x1d00
 8001488:	b21b      	sxth	r3, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fa87 	bl	80009a0 <write_txL_buffer>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <r_water_sense>:
void r_water_sense(){
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
	adc_sel(ADC_CHANNEL_11);
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fb11 	bl	8000ac8 <adc_sel>
	uint8_t adc_data = (uint8_t)adc_read();
 80014a6:	f7ff fb53 	bl	8000b50 <adc_read>
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	adc_reset_conf();
 80014ae:	f7ff fb2f 	bl	8000b10 <adc_reset_conf>
	write_txL_buffer((T_WATER_SENSE|(uint16_t)adc_data));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fa6e 	bl	80009a0 <write_txL_buffer>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <r_reed_det>:


//GPIO input pins Read and transmit-------------------------------------------------------------
void r_reed_det(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, P_REEDSW_DET))
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <r_reed_det+0x2c>)
 80014d6:	f001 fa6b 	bl	80029b0 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <r_reed_det+0x1e>
		write_txL_buffer((T_REED_DET | 0x0001));
 80014e0:	f64f 6001 	movw	r0, #65025	; 0xfe01
 80014e4:	f7ff fa5c 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_REED_DET);
}
 80014e8:	e003      	b.n	80014f2 <r_reed_det+0x26>
		write_txL_buffer(T_REED_DET);
 80014ea:	f44f 407e 	mov.w	r0, #65024	; 0xfe00
 80014ee:	f7ff fa57 	bl	80009a0 <write_txL_buffer>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020800 	.word	0x40020800

080014fc <r_auxreed1>:

void r_auxreed1(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, P_AUXREED1))
 8001500:	2110      	movs	r1, #16
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <r_auxreed1+0x28>)
 8001504:	f001 fa54 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <r_auxreed1+0x1c>
		write_txL_buffer((T_AUXREED1 | 0x0001));
 800150e:	f64f 6011 	movw	r0, #65041	; 0xfe11
 8001512:	f7ff fa45 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_AUXREED1);
}
 8001516:	e003      	b.n	8001520 <r_auxreed1+0x24>
		write_txL_buffer(T_AUXREED1);
 8001518:	f64f 6010 	movw	r0, #65040	; 0xfe10
 800151c:	f7ff fa40 	bl	80009a0 <write_txL_buffer>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40020400 	.word	0x40020400

08001528 <r_auxreed2>:

void r_auxreed2(){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, P_AUXREED2))
 800152c:	2120      	movs	r1, #32
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <r_auxreed2+0x28>)
 8001530:	f001 fa3e 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <r_auxreed2+0x1c>
		write_txL_buffer((T_AUXREED2 | 0x0001));
 800153a:	f64f 6021 	movw	r0, #65057	; 0xfe21
 800153e:	f7ff fa2f 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_AUXREED2);
}
 8001542:	e003      	b.n	800154c <r_auxreed2+0x24>
		write_txL_buffer(T_AUXREED2);
 8001544:	f64f 6020 	movw	r0, #65056	; 0xfe20
 8001548:	f7ff fa2a 	bl	80009a0 <write_txL_buffer>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40020400 	.word	0x40020400

08001554 <r_auxreed3>:

void r_auxreed3(){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, P_AUXREED3))
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <r_auxreed3+0x28>)
 800155c:	f001 fa28 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <r_auxreed3+0x1c>
		write_txL_buffer((T_AUXREED3 | 0x0001));
 8001566:	f64f 6031 	movw	r0, #65073	; 0xfe31
 800156a:	f7ff fa19 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_AUXREED3);
}
 800156e:	e003      	b.n	8001578 <r_auxreed3+0x24>
		write_txL_buffer(T_AUXREED3);
 8001570:	f64f 6030 	movw	r0, #65072	; 0xfe30
 8001574:	f7ff fa14 	bl	80009a0 <write_txL_buffer>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020400 	.word	0x40020400

08001580 <r_parallel_e>:

void r_parallel_e(){
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, P_PARALLEL_E))
 8001584:	2104      	movs	r1, #4
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <r_parallel_e+0x28>)
 8001588:	f001 fa12 	bl	80029b0 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <r_parallel_e+0x1c>
		write_txL_buffer((T_PARALLEL_E | 0x0001));
 8001592:	f64f 6041 	movw	r0, #65089	; 0xfe41
 8001596:	f7ff fa03 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_PARALLEL_E);
}
 800159a:	e003      	b.n	80015a4 <r_parallel_e+0x24>
		write_txL_buffer(T_PARALLEL_E);
 800159c:	f64f 6040 	movw	r0, #65088	; 0xfe40
 80015a0:	f7ff f9fe 	bl	80009a0 <write_txL_buffer>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020400 	.word	0x40020400

080015ac <r_micropower>:

void r_micropower(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, P_MICROPOWER))
 80015b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <r_micropower+0x2c>)
 80015b6:	f001 f9fb 	bl	80029b0 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <r_micropower+0x1e>
		write_txL_buffer((T_MICROPOWER | 0x0001));
 80015c0:	f64f 6051 	movw	r0, #65105	; 0xfe51
 80015c4:	f7ff f9ec 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_MICROPOWER);
}
 80015c8:	e003      	b.n	80015d2 <r_micropower+0x26>
		write_txL_buffer(T_MICROPOWER);
 80015ca:	f64f 6050 	movw	r0, #65104	; 0xfe50
 80015ce:	f7ff f9e7 	bl	80009a0 <write_txL_buffer>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40020800 	.word	0x40020800

080015dc <r_vbatt_e>:
void r_vbatt_e(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, P_VBATT_E))
 80015e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <r_vbatt_e+0x2c>)
 80015e6:	f001 f9e3 	bl	80029b0 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <r_vbatt_e+0x1e>
		write_txL_buffer((T_VBATT_E | 0x0001));
 80015f0:	f64f 6061 	movw	r0, #65121	; 0xfe61
 80015f4:	f7ff f9d4 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_VBATT_E);
}
 80015f8:	e003      	b.n	8001602 <r_vbatt_e+0x26>
		write_txL_buffer(T_VBATT_E);
 80015fa:	f64f 6060 	movw	r0, #65120	; 0xfe60
 80015fe:	f7ff f9cf 	bl	80009a0 <write_txL_buffer>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40020800 	.word	0x40020800

0800160c <r_5v_e>:
void r_5v_e(){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, P_5V_E))
 8001610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <r_5v_e+0x2c>)
 8001616:	f001 f9cb 	bl	80029b0 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <r_5v_e+0x1e>
		write_txL_buffer((T_5V_E | 0x0001));
 8001620:	f64f 6071 	movw	r0, #65137	; 0xfe71
 8001624:	f7ff f9bc 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_5V_E);
}
 8001628:	e003      	b.n	8001632 <r_5v_e+0x26>
		write_txL_buffer(T_5V_E);
 800162a:	f64f 6070 	movw	r0, #65136	; 0xfe70
 800162e:	f7ff f9b7 	bl	80009a0 <write_txL_buffer>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40020800 	.word	0x40020800

0800163c <r_12v_e>:
void r_12v_e(){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, P_12V_E))
 8001640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <r_12v_e+0x2c>)
 8001646:	f001 f9b3 	bl	80029b0 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <r_12v_e+0x1e>
		write_txL_buffer((T_12V_E | 0x0001));
 8001650:	f64f 6081 	movw	r0, #65153	; 0xfe81
 8001654:	f7ff f9a4 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_12V_E);
}
 8001658:	e003      	b.n	8001662 <r_12v_e+0x26>
		write_txL_buffer(T_12V_E);
 800165a:	f64f 6080 	movw	r0, #65152	; 0xfe80
 800165e:	f7ff f99f 	bl	80009a0 <write_txL_buffer>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40020800 	.word	0x40020800

0800166c <r_16v_e>:
void r_16v_e(){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, P_16V_E))
 8001670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <r_16v_e+0x2c>)
 8001676:	f001 f99b 	bl	80029b0 <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <r_16v_e+0x1e>
		write_txL_buffer((T_16V_E | 0x0001));
 8001680:	f64f 6091 	movw	r0, #65169	; 0xfe91
 8001684:	f7ff f98c 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_16V_E);
}
 8001688:	e003      	b.n	8001692 <r_16v_e+0x26>
		write_txL_buffer(T_16V_E);
 800168a:	f64f 6090 	movw	r0, #65168	; 0xfe90
 800168e:	f7ff f987 	bl	80009a0 <write_txL_buffer>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40020800 	.word	0x40020800

0800169c <r_red>:
void r_red(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, P_RED_LED))
 80016a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <r_red+0x2c>)
 80016a6:	f001 f983 	bl	80029b0 <HAL_GPIO_ReadPin>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <r_red+0x1e>
		write_txL_buffer((T_RED | 0x0001));
 80016b0:	f64f 60a1 	movw	r0, #65185	; 0xfea1
 80016b4:	f7ff f974 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_RED);
}
 80016b8:	e003      	b.n	80016c2 <r_red+0x26>
		write_txL_buffer(T_RED);
 80016ba:	f64f 60a0 	movw	r0, #65184	; 0xfea0
 80016be:	f7ff f96f 	bl	80009a0 <write_txL_buffer>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40020400 	.word	0x40020400

080016cc <r_green>:
void r_green(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, P_GREEN_LED))
 80016d0:	2101      	movs	r1, #1
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <r_green+0x28>)
 80016d4:	f001 f96c 	bl	80029b0 <HAL_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <r_green+0x1c>
		write_txL_buffer((T_GREEN | 0x0001));
 80016de:	f64f 60b1 	movw	r0, #65201	; 0xfeb1
 80016e2:	f7ff f95d 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_GREEN);
}
 80016e6:	e003      	b.n	80016f0 <r_green+0x24>
		write_txL_buffer(T_GREEN);
 80016e8:	f64f 60b0 	movw	r0, #65200	; 0xfeb0
 80016ec:	f7ff f958 	bl	80009a0 <write_txL_buffer>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020400 	.word	0x40020400

080016f8 <r_blue>:
void r_blue(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, P_BLUE_LED))
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	4808      	ldr	r0, [pc, #32]	; (8001720 <r_blue+0x28>)
 8001700:	f001 f956 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <r_blue+0x1c>
		write_txL_buffer((T_BLUE | 0x0001));
 800170a:	f64f 60c1 	movw	r0, #65217	; 0xfec1
 800170e:	f7ff f947 	bl	80009a0 <write_txL_buffer>
	else
		write_txL_buffer(T_BLUE);
}
 8001712:	e003      	b.n	800171c <r_blue+0x24>
		write_txL_buffer(T_BLUE);
 8001714:	f64f 60c0 	movw	r0, #65216	; 0xfec0
 8001718:	f7ff f942 	bl	80009a0 <write_txL_buffer>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40020400 	.word	0x40020400

08001724 <r_all_io>:

void r_all_io(){//transmits gpio input and gpio output pins data in following format
 8001724:	b598      	push	{r3, r4, r7, lr}
 8001726:	af00      	add	r7, sp, #0
	//0xE000 | BLUE, GREEN, RED, 16VE, 12VE, 5VE, VBATT, MICROPOWER, PARALLEL_E, AUX3, AUX2, AUX1, REED_DET
	write_txL_buffer(T_ALL_IO|
			HAL_GPIO_ReadPin(GPIOB, P_BLUE_LED)<<12|
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	4840      	ldr	r0, [pc, #256]	; (800182c <r_all_io+0x108>)
 800172c:	f001 f940 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	031b      	lsls	r3, r3, #12
	write_txL_buffer(T_ALL_IO|
 8001734:	b21b      	sxth	r3, r3
 8001736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173a:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOB, P_GREEN_LED)<<11|
 800173c:	2101      	movs	r1, #1
 800173e:	483b      	ldr	r0, [pc, #236]	; (800182c <r_all_io+0x108>)
 8001740:	f001 f936 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	02db      	lsls	r3, r3, #11
			HAL_GPIO_ReadPin(GPIOB, P_BLUE_LED)<<12|
 8001748:	b21b      	sxth	r3, r3
 800174a:	4323      	orrs	r3, r4
 800174c:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOB, P_RED_LED)<<10|
 800174e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001752:	4836      	ldr	r0, [pc, #216]	; (800182c <r_all_io+0x108>)
 8001754:	f001 f92c 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	029b      	lsls	r3, r3, #10
			HAL_GPIO_ReadPin(GPIOB, P_GREEN_LED)<<11|
 800175c:	b21b      	sxth	r3, r3
 800175e:	4323      	orrs	r3, r4
 8001760:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOC, P_16V_E)<<9|
 8001762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001766:	4832      	ldr	r0, [pc, #200]	; (8001830 <r_all_io+0x10c>)
 8001768:	f001 f922 	bl	80029b0 <HAL_GPIO_ReadPin>
 800176c:	4603      	mov	r3, r0
 800176e:	025b      	lsls	r3, r3, #9
			HAL_GPIO_ReadPin(GPIOB, P_RED_LED)<<10|
 8001770:	b21b      	sxth	r3, r3
 8001772:	4323      	orrs	r3, r4
 8001774:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOC, P_12V_E)<<8|
 8001776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177a:	482d      	ldr	r0, [pc, #180]	; (8001830 <r_all_io+0x10c>)
 800177c:	f001 f918 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	021b      	lsls	r3, r3, #8
			HAL_GPIO_ReadPin(GPIOC, P_16V_E)<<9|
 8001784:	b21b      	sxth	r3, r3
 8001786:	4323      	orrs	r3, r4
 8001788:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOC, P_5V_E)<<7|
 800178a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178e:	4828      	ldr	r0, [pc, #160]	; (8001830 <r_all_io+0x10c>)
 8001790:	f001 f90e 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	01db      	lsls	r3, r3, #7
			HAL_GPIO_ReadPin(GPIOC, P_12V_E)<<8|
 8001798:	b21b      	sxth	r3, r3
 800179a:	4323      	orrs	r3, r4
 800179c:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOC, P_VBATT_E)<<6|
 800179e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a2:	4823      	ldr	r0, [pc, #140]	; (8001830 <r_all_io+0x10c>)
 80017a4:	f001 f904 	bl	80029b0 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	019b      	lsls	r3, r3, #6
			HAL_GPIO_ReadPin(GPIOC, P_5V_E)<<7|
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4323      	orrs	r3, r4
 80017b0:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOC, P_MICROPOWER)<<5|
 80017b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b6:	481e      	ldr	r0, [pc, #120]	; (8001830 <r_all_io+0x10c>)
 80017b8:	f001 f8fa 	bl	80029b0 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	015b      	lsls	r3, r3, #5
			HAL_GPIO_ReadPin(GPIOC, P_VBATT_E)<<6|
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4323      	orrs	r3, r4
 80017c4:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOB, P_PARALLEL_E)<<4|
 80017c6:	2104      	movs	r1, #4
 80017c8:	4818      	ldr	r0, [pc, #96]	; (800182c <r_all_io+0x108>)
 80017ca:	f001 f8f1 	bl	80029b0 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	011b      	lsls	r3, r3, #4
			HAL_GPIO_ReadPin(GPIOC, P_MICROPOWER)<<5|
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	4323      	orrs	r3, r4
 80017d6:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOB, P_AUXREED3)<<3|
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	4814      	ldr	r0, [pc, #80]	; (800182c <r_all_io+0x108>)
 80017dc:	f001 f8e8 	bl	80029b0 <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	00db      	lsls	r3, r3, #3
			HAL_GPIO_ReadPin(GPIOB, P_PARALLEL_E)<<4|
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4323      	orrs	r3, r4
 80017e8:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOB, P_AUXREED2)<<2|
 80017ea:	2120      	movs	r1, #32
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <r_all_io+0x108>)
 80017ee:	f001 f8df 	bl	80029b0 <HAL_GPIO_ReadPin>
 80017f2:	4603      	mov	r3, r0
 80017f4:	009b      	lsls	r3, r3, #2
			HAL_GPIO_ReadPin(GPIOB, P_AUXREED3)<<3|
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4323      	orrs	r3, r4
 80017fa:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOB, P_AUXREED1)<<1|
 80017fc:	2110      	movs	r1, #16
 80017fe:	480b      	ldr	r0, [pc, #44]	; (800182c <r_all_io+0x108>)
 8001800:	f001 f8d6 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	005b      	lsls	r3, r3, #1
			HAL_GPIO_ReadPin(GPIOB, P_AUXREED2)<<2|
 8001808:	b21b      	sxth	r3, r3
 800180a:	4323      	orrs	r3, r4
 800180c:	b21c      	sxth	r4, r3
			HAL_GPIO_ReadPin(GPIOC, P_REEDSW_DET));
 800180e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <r_all_io+0x10c>)
 8001814:	f001 f8cc 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	b21b      	sxth	r3, r3
			HAL_GPIO_ReadPin(GPIOB, P_AUXREED1)<<1|
 800181c:	4323      	orrs	r3, r4
 800181e:	b21b      	sxth	r3, r3
	write_txL_buffer(T_ALL_IO|
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f8bc 	bl	80009a0 <write_txL_buffer>
}
 8001828:	bf00      	nop
 800182a:	bd98      	pop	{r3, r4, r7, pc}
 800182c:	40020400 	.word	0x40020400
 8001830:	40020800 	.word	0x40020800

08001834 <txL_buffer_full>:

//Buffer errors and bad rx instructions
void txL_buffer_full(){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	write_txH_buffer(TXL_BUFFER_FULL_ERROR);
 8001838:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 800183c:	f7ff f8ca 	bl	80009d4 <write_txH_buffer>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <rx_buffer_full>:
void rx_buffer_full(){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	write_txH_buffer(RX_BUFFER_FULL_ERROR);
 8001848:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800184c:	f7ff f8c2 	bl	80009d4 <write_txH_buffer>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <bad_rx_request>:
void bad_rx_request(){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	write_txH_buffer(INVALID_REQUEST_ERROR);
 8001858:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800185c:	f7ff f8ba 	bl	80009d4 <write_txH_buffer>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018a2:	2007      	movs	r0, #7
 80018a4:	f000 fe3c 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_ADC_MspInit+0xb0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d141      	bne.n	800195a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_ADC_MspInit+0xb4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192e:	2303      	movs	r3, #3
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480b      	ldr	r0, [pc, #44]	; (800196c <HAL_ADC_MspInit+0xb8>)
 800193e:	f000 fec3 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001942:	23ff      	movs	r3, #255	; 0xff
 8001944:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001946:	2303      	movs	r3, #3
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4806      	ldr	r0, [pc, #24]	; (8001970 <HAL_ADC_MspInit+0xbc>)
 8001956:	f000 feb7 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40012000 	.word	0x40012000
 8001968:	40023800 	.word	0x40023800
 800196c:	40020800 	.word	0x40020800
 8001970:	40020000 	.word	0x40020000

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_UART_MspInit+0x94>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d134      	bne.n	8001a00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_UART_MspInit+0x98>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a1b      	ldr	r2, [pc, #108]	; (8001a0c <HAL_UART_MspInit+0x98>)
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_UART_MspInit+0x98>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_UART_MspInit+0x98>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <HAL_UART_MspInit+0x98>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_UART_MspInit+0x98>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019e0:	2308      	movs	r3, #8
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4809      	ldr	r0, [pc, #36]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 80019ec:	f000 fe6c 	bl	80026c8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2047      	movs	r0, #71	; 0x47
 80019f6:	f000 fd9e 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019fa:	2047      	movs	r0, #71	; 0x47
 80019fc:	f000 fdb7 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40011400 	.word	0x40011400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler+0x4>

08001a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler+0x4>

08001a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a60:	f000 f8c0 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f000 ffd1 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a7a:	2040      	movs	r0, #64	; 0x40
 8001a7c:	f000 ffca 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a80:	2080      	movs	r0, #128	; 0x80
 8001a82:	f000 ffc7 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a8a:	f000 ffc3 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a92:	f000 ffbf 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aa2:	f000 ffb7 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001aa6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001aaa:	f000 ffb3 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <USART6_IRQHandler+0x10>)
 8001aba:	f001 fd77 	bl	80035ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000070 	.word	0x20000070

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ffd7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f002 fcb7 	bl	800448c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff f829 	bl	8000b74 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b30:	08004514 	.word	0x08004514
  ldr r2, =_sbss
 8001b34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b38:	200018e0 	.word	0x200018e0

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 fcd9 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fe76 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fcf1 	bl	800258a <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 fcb9 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	200018dc 	.word	0x200018dc

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200018dc 	.word	0x200018dc

08001c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e033      	b.n	8001ca2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fe36 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c6a:	f023 0302 	bic.w	r3, r3, #2
 8001c6e:	f043 0202 	orr.w	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa86 	bl	8002188 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f023 0303 	bic.w	r3, r3, #3
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
 8001c92:	e001      	b.n	8001c98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Start+0x1a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e097      	b.n	8001df6 <HAL_ADC_Start+0x14a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d018      	beq.n	8001d0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cec:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <HAL_ADC_Start+0x158>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_ADC_Start+0x15c>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9a      	lsrs	r2, r3, #18
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d15f      	bne.n	8001ddc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5a:	d106      	bne.n	8001d6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f023 0206 	bic.w	r2, r3, #6
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_ADC_Start+0x160>)
 8001d7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10f      	bne.n	8001db2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d129      	bne.n	8001df4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	e020      	b.n	8001df4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_ADC_Start+0x164>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d11b      	bne.n	8001df4 <HAL_ADC_Start+0x148>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d114      	bne.n	8001df4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	e00b      	b.n	8001df4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f043 0210 	orr.w	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	40012000 	.word	0x40012000

08001e14 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e30:	d113      	bne.n	8001e5a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e40:	d10b      	bne.n	8001e5a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f043 0220 	orr.w	r2, r3, #32
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e063      	b.n	8001f22 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e5a:	f7ff fed7 	bl	8001c0c <HAL_GetTick>
 8001e5e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e60:	e021      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d01d      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_ADC_PollForConversion+0x6c>
 8001e70:	f7ff fecc 	bl	8001c0c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d212      	bcs.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e03d      	b.n	8001f22 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d1d6      	bne.n	8001e62 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0212 	mvn.w	r2, #18
 8001ebc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d123      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d11f      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e105      	b.n	800216c <HAL_ADC_ConfigChannel+0x228>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d925      	bls.n	8001fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68d9      	ldr	r1, [r3, #12]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	2207      	movs	r2, #7
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68d9      	ldr	r1, [r3, #12]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4603      	mov	r3, r0
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4403      	add	r3, r0
 8001fae:	3b1e      	subs	r3, #30
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	e022      	b.n	8002002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4403      	add	r3, r0
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b06      	cmp	r3, #6
 8002008:	d824      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b05      	subs	r3, #5
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b05      	subs	r3, #5
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
 8002052:	e04c      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d824      	bhi.n	80020a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b23      	subs	r3, #35	; 0x23
 800206e:	221f      	movs	r2, #31
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43da      	mvns	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b23      	subs	r3, #35	; 0x23
 8002098:	fa00 f203 	lsl.w	r2, r0, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
 80020a4:	e023      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b41      	subs	r3, #65	; 0x41
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b41      	subs	r3, #65	; 0x41
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_ADC_ConfigChannel+0x234>)
 80020f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_ADC_ConfigChannel+0x238>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d109      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1cc>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d105      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_ADC_ConfigChannel+0x238>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d123      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d003      	beq.n	800212a <HAL_ADC_ConfigChannel+0x1e6>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b11      	cmp	r3, #17
 8002128:	d11b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d111      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_ADC_ConfigChannel+0x23c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_ADC_ConfigChannel+0x240>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40012300 	.word	0x40012300
 800217c:	40012000 	.word	0x40012000
 8002180:	20000000 	.word	0x20000000
 8002184:	431bde83 	.word	0x431bde83

08002188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b79      	ldr	r3, [pc, #484]	; (8002378 <ADC_Init+0x1f0>)
 8002192:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	021a      	lsls	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	4a58      	ldr	r2, [pc, #352]	; (800237c <ADC_Init+0x1f4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800222e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e00f      	b.n	8002286 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002284:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0202 	bic.w	r2, r2, #2
 8002294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e1b      	ldrb	r3, [r3, #24]
 80022a0:	005a      	lsls	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	035a      	lsls	r2, r3, #13
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e007      	b.n	80022fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	3b01      	subs	r3, #1
 8002318:	051a      	lsls	r2, r3, #20
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233e:	025a      	lsls	r2, r3, #9
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	029a      	lsls	r2, r3, #10
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40012300 	.word	0x40012300
 800237c:	0f000001 	.word	0x0f000001

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff29 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff3e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff8e 	bl	8002474 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff31 	bl	80023e4 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa2 	bl	80024dc <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff fb2c 	bl	8001c0c <HAL_GetTick>
 80025b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d008      	beq.n	80025d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e052      	b.n	800267a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0216 	bic.w	r2, r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <HAL_DMA_Abort+0x62>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0208 	bic.w	r2, r2, #8
 8002612:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002624:	e013      	b.n	800264e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002626:	f7ff faf1 	bl	8001c0c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b05      	cmp	r3, #5
 8002632:	d90c      	bls.n	800264e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e015      	b.n	800267a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e4      	bne.n	8002626 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	223f      	movs	r2, #63	; 0x3f
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e00c      	b.n	80026ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2205      	movs	r2, #5
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e14d      	b.n	8002980 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 813c 	bne.w	800297a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d005      	beq.n	800271a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	2b02      	cmp	r3, #2
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8096 	beq.w	800297a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b51      	ldr	r3, [pc, #324]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a50      	ldr	r2, [pc, #320]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b4e      	ldr	r3, [pc, #312]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286a:	4a4c      	ldr	r2, [pc, #304]	; (800299c <HAL_GPIO_Init+0x2d4>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a43      	ldr	r2, [pc, #268]	; (80029a0 <HAL_GPIO_Init+0x2d8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_GPIO_Init+0x1ea>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a42      	ldr	r2, [pc, #264]	; (80029a4 <HAL_GPIO_Init+0x2dc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_Init+0x1e6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a41      	ldr	r2, [pc, #260]	; (80029a8 <HAL_GPIO_Init+0x2e0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_GPIO_Init+0x1e2>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x1ec>
 80028aa:	2307      	movs	r3, #7
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x1ec>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x1ec>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_GPIO_Init+0x2d4>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a22      	ldr	r2, [pc, #136]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f aeae 	bls.w	80026e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40013c00 	.word	0x40013c00

080029b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd ffe2 	bl	80009fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0cc      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d90c      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d119      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e067      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4934      	ldr	r1, [pc, #208]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7ff f86a 	bl	8001c0c <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7ff f866 	bl	8001c0c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e04f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d20c      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe ffca 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	080044ec 	.word	0x080044ec
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c14:	b094      	sub	sp, #80	; 0x50
 8002c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c20:	2300      	movs	r3, #0
 8002c22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c28:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d00d      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x40>
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	f200 80e1 	bhi.w	8002dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c42:	e0db      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c48:	e0db      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c4e:	e0d8      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c66:	4b6a      	ldr	r3, [pc, #424]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c82:	4622      	mov	r2, r4
 8002c84:	462b      	mov	r3, r5
 8002c86:	f04f 0000 	mov.w	r0, #0
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	0159      	lsls	r1, r3, #5
 8002c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c94:	0150      	lsls	r0, r2, #5
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	1a51      	subs	r1, r2, r1
 8002c9e:	6139      	str	r1, [r7, #16]
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	018b      	lsls	r3, r1, #6
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	018a      	lsls	r2, r1, #6
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc8:	4659      	mov	r1, fp
 8002cca:	eb63 0901 	sbc.w	r9, r3, r1
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ce2:	4690      	mov	r8, r2
 8002ce4:	4699      	mov	r9, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	eb18 0303 	adds.w	r3, r8, r3
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	462b      	mov	r3, r5
 8002cf0:	eb49 0303 	adc.w	r3, r9, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d02:	4629      	mov	r1, r5
 8002d04:	024b      	lsls	r3, r1, #9
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	024a      	lsls	r2, r1, #9
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d16:	2200      	movs	r2, #0
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d20:	f7fd fa72 	bl	8000208 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4613      	mov	r3, r2
 8002d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d2c:	e058      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	4611      	mov	r1, r2
 8002d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d48:	4642      	mov	r2, r8
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	f04f 0000 	mov.w	r0, #0
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	0159      	lsls	r1, r3, #5
 8002d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5a:	0150      	lsls	r0, r2, #5
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4641      	mov	r1, r8
 8002d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d66:	4649      	mov	r1, r9
 8002d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d80:	ebb2 040a 	subs.w	r4, r2, sl
 8002d84:	eb63 050b 	sbc.w	r5, r3, fp
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	00eb      	lsls	r3, r5, #3
 8002d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d96:	00e2      	lsls	r2, r4, #3
 8002d98:	4614      	mov	r4, r2
 8002d9a:	461d      	mov	r5, r3
 8002d9c:	4643      	mov	r3, r8
 8002d9e:	18e3      	adds	r3, r4, r3
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	464b      	mov	r3, r9
 8002da4:	eb45 0303 	adc.w	r3, r5, r3
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db6:	4629      	mov	r1, r5
 8002db8:	028b      	lsls	r3, r1, #10
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	028a      	lsls	r2, r1, #10
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	61fa      	str	r2, [r7, #28]
 8002dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd4:	f7fd fa18 	bl	8000208 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	3301      	adds	r3, #1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfa:	e002      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3750      	adds	r7, #80	; 0x50
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	007a1200 	.word	0x007a1200

08002e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000

08002e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e38:	f7ff fff0 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0a9b      	lsrs	r3, r3, #10
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	080044fc 	.word	0x080044fc

08002e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e60:	f7ff ffdc 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0b5b      	lsrs	r3, r3, #13
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	080044fc 	.word	0x080044fc

08002e84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e273      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d075      	beq.n	8002f8e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea2:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d00c      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eae:	4b85      	ldr	r3, [pc, #532]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d112      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eba:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	4b7e      	ldr	r3, [pc, #504]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d05b      	beq.n	8002f8c <HAL_RCC_OscConfig+0x108>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d157      	bne.n	8002f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e24e      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x74>
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x98>
 8002f02:	4b70      	ldr	r3, [pc, #448]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6f      	ldr	r2, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6c      	ldr	r2, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	4b69      	ldr	r3, [pc, #420]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a68      	ldr	r2, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a65      	ldr	r2, [pc, #404]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fe66 	bl	8001c0c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fe62 	bl	8001c0c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e213      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xc0>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fe52 	bl	8001c0c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fe4e 	bl	8001c0c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1ff      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0xe8>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b44      	ldr	r3, [pc, #272]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1d3      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4937      	ldr	r1, [pc, #220]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_OscConfig+0x244>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fe07 	bl	8001c0c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fe03 	bl	8001c0c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1b4      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4925      	ldr	r1, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x244>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fde6 	bl	8001c0c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fde2 	bl	8001c0c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e193      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d036      	beq.n	80030dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_RCC_OscConfig+0x248>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe fdc6 	bl	8001c0c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe fdc2 	bl	8001c0c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e173      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x200>
 80030a2:	e01b      	b.n	80030dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_OscConfig+0x248>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe fdaf 	bl	8001c0c <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	e00e      	b.n	80030d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b2:	f7fe fdab 	bl	8001c0c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d907      	bls.n	80030d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e15c      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	42470000 	.word	0x42470000
 80030cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4b8a      	ldr	r3, [pc, #552]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80030d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1ea      	bne.n	80030b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8097 	beq.w	8003218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b83      	ldr	r3, [pc, #524]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a7e      	ldr	r2, [pc, #504]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b79      	ldr	r3, [pc, #484]	; (8003300 <HAL_RCC_OscConfig+0x47c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	4b76      	ldr	r3, [pc, #472]	; (8003300 <HAL_RCC_OscConfig+0x47c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a75      	ldr	r2, [pc, #468]	; (8003300 <HAL_RCC_OscConfig+0x47c>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7fe fd6b 	bl	8001c0c <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe fd67 	bl	8001c0c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e118      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <HAL_RCC_OscConfig+0x47c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x2ea>
 8003160:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a65      	ldr	r2, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	e01c      	b.n	80031a8 <HAL_RCC_OscConfig+0x324>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x30c>
 8003176:	4b61      	ldr	r3, [pc, #388]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a60      	ldr	r2, [pc, #384]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
 8003182:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a5d      	ldr	r2, [pc, #372]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0x324>
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a59      	ldr	r2, [pc, #356]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a56      	ldr	r2, [pc, #344]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80031a2:	f023 0304 	bic.w	r3, r3, #4
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d015      	beq.n	80031dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe fd2c 	bl	8001c0c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fd28 	bl	8001c0c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0d7      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	4b4b      	ldr	r3, [pc, #300]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ee      	beq.n	80031b8 <HAL_RCC_OscConfig+0x334>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fd16 	bl	8001c0c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fe fd12 	bl	8001c0c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0c1      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ee      	bne.n	80031e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80ad 	beq.w	800337c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d060      	beq.n	80032f0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d145      	bne.n	80032c2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b33      	ldr	r3, [pc, #204]	; (8003304 <HAL_RCC_OscConfig+0x480>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fce6 	bl	8001c0c <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe fce2 	bl	8001c0c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e093      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	491b      	ldr	r1, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x480>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fcb7 	bl	8001c0c <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe fcb3 	bl	8001c0c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e064      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x41e>
 80032c0:	e05c      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_RCC_OscConfig+0x480>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe fca0 	bl	8001c0c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe fc9c 	bl	8001c0c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e04d      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x44c>
 80032ee:	e045      	b.n	800337c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e040      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
 80032fc:	40023800 	.word	0x40023800
 8003300:	40007000 	.word	0x40007000
 8003304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003308:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <HAL_RCC_OscConfig+0x504>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d030      	beq.n	8003378 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d129      	bne.n	8003378 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d122      	bne.n	8003378 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003340:	4293      	cmp	r3, r2
 8003342:	d119      	bne.n	8003378 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d10f      	bne.n	8003378 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e03f      	b.n	800341e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe fade 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fddf 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b08a      	sub	sp, #40	; 0x28
 800342a:	af02      	add	r7, sp, #8
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b20      	cmp	r3, #32
 8003444:	d17c      	bne.n	8003540 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_Transmit+0x2c>
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e075      	b.n	8003542 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_UART_Transmit+0x3e>
 8003460:	2302      	movs	r3, #2
 8003462:	e06e      	b.n	8003542 <HAL_UART_Transmit+0x11c>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800347a:	f7fe fbc7 	bl	8001c0c <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d108      	bne.n	80034a8 <HAL_UART_Transmit+0x82>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e003      	b.n	80034b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034b8:	e02a      	b.n	8003510 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fb1f 	bl	8003b08 <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e036      	b.n	8003542 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3302      	adds	r3, #2
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	e007      	b.n	8003502 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3301      	adds	r3, #1
 8003500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1cf      	bne.n	80034ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	2140      	movs	r1, #64	; 0x40
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 faef 	bl	8003b08 <UART_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e006      	b.n	8003542 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d11d      	bne.n	80035a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_UART_Receive_IT+0x26>
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e016      	b.n	80035a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_UART_Receive_IT+0x38>
 800357e:	2302      	movs	r3, #2
 8003580:	e00f      	b.n	80035a2 <HAL_UART_Receive_IT+0x58>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	461a      	mov	r2, r3
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fb24 	bl	8003be4 <UART_Start_Receive_IT>
 800359c:	4603      	mov	r3, r0
 800359e:	e000      	b.n	80035a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b0ba      	sub	sp, #232	; 0xe8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_UART_IRQHandler+0x66>
 80035fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fc07 	bl	8003e1e <UART_Receive_IT>
      return;
 8003610:	e256      	b.n	8003ac0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80de 	beq.w	80037d8 <HAL_UART_IRQHandler+0x22c>
 800361c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80d1 	beq.w	80037d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_UART_IRQHandler+0xae>
 8003642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_UART_IRQHandler+0xd2>
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_UART_IRQHandler+0xf6>
 800368a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d011      	beq.n	80036d2 <HAL_UART_IRQHandler+0x126>
 80036ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f043 0208 	orr.w	r2, r3, #8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 81ed 	beq.w	8003ab6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_UART_IRQHandler+0x14e>
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb92 	bl	8003e1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <HAL_UART_IRQHandler+0x17a>
 800371e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04f      	beq.n	80037c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa9a 	bl	8003c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d141      	bne.n	80037be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3314      	adds	r3, #20
 8003740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800376a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800377e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1d9      	bne.n	800373a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	2b00      	cmp	r3, #0
 800378c:	d013      	beq.n	80037b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4a7d      	ldr	r2, [pc, #500]	; (8003988 <HAL_UART_IRQHandler+0x3dc>)
 8003794:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe ff71 	bl	8002682 <HAL_DMA_Abort_IT>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037b0:	4610      	mov	r0, r2
 80037b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e00e      	b.n	80037d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f990 	bl	8003adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e00a      	b.n	80037d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f98c 	bl	8003adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	e006      	b.n	80037d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f988 	bl	8003adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037d2:	e170      	b.n	8003ab6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	bf00      	nop
    return;
 80037d6:	e16e      	b.n	8003ab6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f040 814a 	bne.w	8003a76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8143 	beq.w	8003a76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 813c 	beq.w	8003a76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	f040 80b4 	bne.w	800398c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003830:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8140 	beq.w	8003aba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800383e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003842:	429a      	cmp	r2, r3
 8003844:	f080 8139 	bcs.w	8003aba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800384e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385a:	f000 8088 	beq.w	800396e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800388a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800388e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1d9      	bne.n	800385e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3314      	adds	r3, #20
 80038ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1e1      	bne.n	80038aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3314      	adds	r3, #20
 80038ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800390a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800390c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e3      	bne.n	80038e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800393c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003950:	65ba      	str	r2, [r7, #88]	; 0x58
 8003952:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800395e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e3      	bne.n	800392c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fe1a 	bl	80025a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003976:	b29b      	uxth	r3, r3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	b29b      	uxth	r3, r3
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8b6 	bl	8003af0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003984:	e099      	b.n	8003aba <HAL_UART_IRQHandler+0x50e>
 8003986:	bf00      	nop
 8003988:	08003d27 	.word	0x08003d27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003994:	b29b      	uxth	r3, r3
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 808b 	beq.w	8003abe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80039a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8086 	beq.w	8003abe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039d6:	647a      	str	r2, [r7, #68]	; 0x44
 80039d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e3      	bne.n	80039b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	623b      	str	r3, [r7, #32]
   return(result);
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e3      	bne.n	80039ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0310 	bic.w	r3, r3, #16
 8003a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	617b      	str	r3, [r7, #20]
   return(result);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e3      	bne.n	8003a30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f83e 	bl	8003af0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a74:	e023      	b.n	8003abe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_UART_IRQHandler+0x4ea>
 8003a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f95d 	bl	8003d4e <UART_Transmit_IT>
    return;
 8003a94:	e014      	b.n	8003ac0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x514>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f99d 	bl	8003dee <UART_EndTransmit_IT>
    return;
 8003ab4:	e004      	b.n	8003ac0 <HAL_UART_IRQHandler+0x514>
    return;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8003abe:	bf00      	nop
  }
}
 8003ac0:	37e8      	adds	r7, #232	; 0xe8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop

08003ac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b090      	sub	sp, #64	; 0x40
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b18:	e050      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d04c      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b28:	f7fe f870 	bl	8001c0c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d241      	bcs.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b58:	637a      	str	r2, [r7, #52]	; 0x34
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b8c:	623a      	str	r2, [r7, #32]
 8003b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	69f9      	ldr	r1, [r7, #28]
 8003b92:	6a3a      	ldr	r2, [r7, #32]
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e00f      	b.n	8003bdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d09f      	beq.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3740      	adds	r7, #64	; 0x40
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2222      	movs	r2, #34	; 0x22
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0220 	orr.w	r2, r2, #32
 8003c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b095      	sub	sp, #84	; 0x54
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c88:	643a      	str	r2, [r7, #64]	; 0x40
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d119      	bne.n	8003d0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf8:	61ba      	str	r2, [r7, #24]
 8003cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6979      	ldr	r1, [r7, #20]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	613b      	str	r3, [r7, #16]
   return(result);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d1a:	bf00      	nop
 8003d1c:	3754      	adds	r7, #84	; 0x54
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff fecb 	bl	8003adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b21      	cmp	r3, #33	; 0x21
 8003d60:	d13e      	bne.n	8003de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d114      	bne.n	8003d96 <UART_Transmit_IT+0x48>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d110      	bne.n	8003d96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]
 8003d94:	e008      	b.n	8003da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6211      	str	r1, [r2, #32]
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10f      	bne.n	8003ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fe5a 	bl	8003ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08c      	sub	sp, #48	; 0x30
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b22      	cmp	r3, #34	; 0x22
 8003e30:	f040 80ab 	bne.w	8003f8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d117      	bne.n	8003e6e <UART_Receive_IT+0x50>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d113      	bne.n	8003e6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6c:	e026      	b.n	8003ebc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d007      	beq.n	8003e92 <UART_Receive_IT+0x74>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <UART_Receive_IT+0x82>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e008      	b.n	8003eb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d15a      	bne.n	8003f86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0220 	bic.w	r2, r2, #32
 8003ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d135      	bne.n	8003f7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	613b      	str	r3, [r7, #16]
   return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f023 0310 	bic.w	r3, r3, #16
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	623a      	str	r2, [r7, #32]
 8003f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	69f9      	ldr	r1, [r7, #28]
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d10a      	bne.n	8003f6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fdbb 	bl	8003af0 <HAL_UARTEx_RxEventCallback>
 8003f7a:	e002      	b.n	8003f82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7fc fce5 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e002      	b.n	8003f8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3730      	adds	r7, #48	; 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f98:	b0c0      	sub	sp, #256	; 0x100
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	68d9      	ldr	r1, [r3, #12]
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	ea40 0301 	orr.w	r3, r0, r1
 8003fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fec:	f021 010c 	bic.w	r1, r1, #12
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	6999      	ldr	r1, [r3, #24]
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	ea40 0301 	orr.w	r3, r0, r1
 800401a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8f      	ldr	r3, [pc, #572]	; (8004260 <UART_SetConfig+0x2cc>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <UART_SetConfig+0xa0>
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b8d      	ldr	r3, [pc, #564]	; (8004264 <UART_SetConfig+0x2d0>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d104      	bne.n	800403e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe ff12 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8004038:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800403c:	e003      	b.n	8004046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403e:	f7fe fef9 	bl	8002e34 <HAL_RCC_GetPCLK1Freq>
 8004042:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	f040 810c 	bne.w	800426c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800405e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	1891      	adds	r1, r2, r2
 800406c:	65b9      	str	r1, [r7, #88]	; 0x58
 800406e:	415b      	adcs	r3, r3
 8004070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004076:	4621      	mov	r1, r4
 8004078:	eb12 0801 	adds.w	r8, r2, r1
 800407c:	4629      	mov	r1, r5
 800407e:	eb43 0901 	adc.w	r9, r3, r1
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004096:	4690      	mov	r8, r2
 8004098:	4699      	mov	r9, r3
 800409a:	4623      	mov	r3, r4
 800409c:	eb18 0303 	adds.w	r3, r8, r3
 80040a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040a4:	462b      	mov	r3, r5
 80040a6:	eb49 0303 	adc.w	r3, r9, r3
 80040aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040c2:	460b      	mov	r3, r1
 80040c4:	18db      	adds	r3, r3, r3
 80040c6:	653b      	str	r3, [r7, #80]	; 0x50
 80040c8:	4613      	mov	r3, r2
 80040ca:	eb42 0303 	adc.w	r3, r2, r3
 80040ce:	657b      	str	r3, [r7, #84]	; 0x54
 80040d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040d8:	f7fc f896 	bl	8000208 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <UART_SetConfig+0x2d4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	64b9      	str	r1, [r7, #72]	; 0x48
 8004104:	415b      	adcs	r3, r3
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800410c:	4641      	mov	r1, r8
 800410e:	eb12 0a01 	adds.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0b01 	adc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412c:	4692      	mov	sl, r2
 800412e:	469b      	mov	fp, r3
 8004130:	4643      	mov	r3, r8
 8004132:	eb1a 0303 	adds.w	r3, sl, r3
 8004136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800413a:	464b      	mov	r3, r9
 800413c:	eb4b 0303 	adc.w	r3, fp, r3
 8004140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004150:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004158:	460b      	mov	r3, r1
 800415a:	18db      	adds	r3, r3, r3
 800415c:	643b      	str	r3, [r7, #64]	; 0x40
 800415e:	4613      	mov	r3, r2
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
 8004166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800416a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800416e:	f7fc f84b 	bl	8000208 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4611      	mov	r1, r2
 8004178:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2301 	umull	r2, r3, r3, r1
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2264      	movs	r2, #100	; 0x64
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	1acb      	subs	r3, r1, r3
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <UART_SetConfig+0x2d4>)
 8004190:	fba3 2302 	umull	r2, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800419c:	441c      	add	r4, r3
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041b8:	415b      	adcs	r3, r3
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6339      	str	r1, [r7, #48]	; 0x30
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041f4:	464b      	mov	r3, r9
 80041f6:	460a      	mov	r2, r1
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800420c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004214:	460b      	mov	r3, r1
 8004216:	18db      	adds	r3, r3, r3
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	4613      	mov	r3, r2
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800422a:	f7fb ffed 	bl	8000208 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <UART_SetConfig+0x2d4>)
 8004234:	fba3 1302 	umull	r1, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2164      	movs	r1, #100	; 0x64
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3332      	adds	r3, #50	; 0x32
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <UART_SetConfig+0x2d4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4422      	add	r2, r4
 800425a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800425c:	e106      	b.n	800446c <UART_SetConfig+0x4d8>
 800425e:	bf00      	nop
 8004260:	40011000 	.word	0x40011000
 8004264:	40011400 	.word	0x40011400
 8004268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004276:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800427a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	1891      	adds	r1, r2, r2
 8004284:	6239      	str	r1, [r7, #32]
 8004286:	415b      	adcs	r3, r3
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428e:	4641      	mov	r1, r8
 8004290:	1854      	adds	r4, r2, r1
 8004292:	4649      	mov	r1, r9
 8004294:	eb43 0501 	adc.w	r5, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	00eb      	lsls	r3, r5, #3
 80042a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a6:	00e2      	lsls	r2, r4, #3
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	4643      	mov	r3, r8
 80042ae:	18e3      	adds	r3, r4, r3
 80042b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042b4:	464b      	mov	r3, r9
 80042b6:	eb45 0303 	adc.w	r3, r5, r3
 80042ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042da:	4629      	mov	r1, r5
 80042dc:	008b      	lsls	r3, r1, #2
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e4:	4621      	mov	r1, r4
 80042e6:	008a      	lsls	r2, r1, #2
 80042e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042ec:	f7fb ff8c 	bl	8000208 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4b60      	ldr	r3, [pc, #384]	; (8004478 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2302 	umull	r2, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	011c      	lsls	r4, r3, #4
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004308:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800430c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	1891      	adds	r1, r2, r2
 8004316:	61b9      	str	r1, [r7, #24]
 8004318:	415b      	adcs	r3, r3
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004320:	4641      	mov	r1, r8
 8004322:	1851      	adds	r1, r2, r1
 8004324:	6139      	str	r1, [r7, #16]
 8004326:	4649      	mov	r1, r9
 8004328:	414b      	adcs	r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	00cb      	lsls	r3, r1, #3
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004342:	4651      	mov	r1, sl
 8004344:	00ca      	lsls	r2, r1, #3
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	4603      	mov	r3, r0
 800434c:	4642      	mov	r2, r8
 800434e:	189b      	adds	r3, r3, r2
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004354:	464b      	mov	r3, r9
 8004356:	460a      	mov	r2, r1
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	67bb      	str	r3, [r7, #120]	; 0x78
 800436a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004378:	4649      	mov	r1, r9
 800437a:	008b      	lsls	r3, r1, #2
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004382:	4641      	mov	r1, r8
 8004384:	008a      	lsls	r2, r1, #2
 8004386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800438a:	f7fb ff3d 	bl	8000208 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b38      	ldr	r3, [pc, #224]	; (8004478 <UART_SetConfig+0x4e4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	; 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a33      	ldr	r2, [pc, #204]	; (8004478 <UART_SetConfig+0x4e4>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b4:	441c      	add	r4, r3
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	673b      	str	r3, [r7, #112]	; 0x70
 80043be:	677a      	str	r2, [r7, #116]	; 0x74
 80043c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	66bb      	str	r3, [r7, #104]	; 0x68
 8004406:	464b      	mov	r3, r9
 8004408:	460a      	mov	r2, r1
 800440a:	eb42 0303 	adc.w	r3, r2, r3
 800440e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	663b      	str	r3, [r7, #96]	; 0x60
 800441a:	667a      	str	r2, [r7, #100]	; 0x64
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800443a:	f7fb fee5 	bl	8000208 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <UART_SetConfig+0x4e4>)
 8004444:	fba3 1302 	umull	r1, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2164      	movs	r1, #100	; 0x64
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	3332      	adds	r3, #50	; 0x32
 8004456:	4a08      	ldr	r2, [pc, #32]	; (8004478 <UART_SetConfig+0x4e4>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4422      	add	r2, r4
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004478:	51eb851f 	.word	0x51eb851f

0800447c <memset>:
 800447c:	4402      	add	r2, r0
 800447e:	4603      	mov	r3, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <__libc_init_array>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4d0d      	ldr	r5, [pc, #52]	; (80044c4 <__libc_init_array+0x38>)
 8004490:	4c0d      	ldr	r4, [pc, #52]	; (80044c8 <__libc_init_array+0x3c>)
 8004492:	1b64      	subs	r4, r4, r5
 8004494:	10a4      	asrs	r4, r4, #2
 8004496:	2600      	movs	r6, #0
 8004498:	42a6      	cmp	r6, r4
 800449a:	d109      	bne.n	80044b0 <__libc_init_array+0x24>
 800449c:	4d0b      	ldr	r5, [pc, #44]	; (80044cc <__libc_init_array+0x40>)
 800449e:	4c0c      	ldr	r4, [pc, #48]	; (80044d0 <__libc_init_array+0x44>)
 80044a0:	f000 f818 	bl	80044d4 <_init>
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	2600      	movs	r6, #0
 80044aa:	42a6      	cmp	r6, r4
 80044ac:	d105      	bne.n	80044ba <__libc_init_array+0x2e>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b4:	4798      	blx	r3
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7ee      	b.n	8004498 <__libc_init_array+0xc>
 80044ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80044be:	4798      	blx	r3
 80044c0:	3601      	adds	r6, #1
 80044c2:	e7f2      	b.n	80044aa <__libc_init_array+0x1e>
 80044c4:	0800450c 	.word	0x0800450c
 80044c8:	0800450c 	.word	0x0800450c
 80044cc:	0800450c 	.word	0x0800450c
 80044d0:	08004510 	.word	0x08004510

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
